snippet defm
defmodule $1 do
	$2
end
endsnippet

snippet def
def $1($2) do
	$3
end
endsnippet

snippet defp
defp $1($2) do
	$3
end
endsnippet

snippet defl
def $1(assigns) do
	~H"""
	$2
	"""
end
endsnippet

snippet defpl
defp $1(assigns) do
	~H"""
	$2
	"""
end
endsnippet

snippet map
Enum.map($1, $2)
endsnippet

snippet mapp
|> Enum.map($1)
endsnippet

snippet each
Enum.each($1, $2)
endsnippet

snippet eachh
|> Enum.each($1)
endsnippet

snippet	keys
Map.keys()
endsnippet

snippet	keyss
|> Map.keys()
endsnippet

snippet ins
IO.inspect($1)
endsnippet

snippet inss
|> IO.inspect($1)
endsnippet

snippet filter
Enum.filter($1)
endsnippet

snippet filterr
|> Enum.filter($1)
endsnippet

snippet uniq
Enum.uniq($1)
endsnippet

snippet uniqq
|> Enum.uniq()
endsnippet

snippet @moduledoc
@moduledoc """
$0
"""
endsnippet

snippet @doc
@doc """
$0
"""
endsnippet

snippet test
test "$1" do
	$2
end
endsnippet

snippet describe
describe "$1" do
	$2
end
endsnippet

snippet if "add an if block" !b
if ${1:condition} do
  $0
end
endsnippet

snippet ife "add an if-else block" !b
if ${1:condition} do
  $2
else
  $0
end
endsnippet

snippet cond "add a cond block" !b
cond do
  $0
end
endsnippet

snippet fn "insert an anonymous function" !i
fn(${1:args}) -> ${0} end
endsnippet

snippet & "insert an anonymous function short syntax" !i
&($1)$0
endsnippet

snippet ok "Insert ok tuple" !i
{:ok, ${1:value}}$0
endsnippet

snippet err "Insert error tuple" !i
{:error, ${1:value}}$0
endsnippet

snippet rpry "require IEx and pry" b
require IEx; IEx.pry
endsnippet

snippet pry "IEx.pry" b
IEx.pry
endsnippet

snippet explain "Ecto helpers" b
Ecto.Adapters.SQL.explain(Repo, :all, query, buffers: true, analyze: true)
|> IO.puts()

{txt, _} = Ecto.Adapters.SQL.to_sql(:all, Repo, query)
IO.puts(txt)
endsnippet
